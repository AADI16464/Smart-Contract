// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract BakeryShop 
{
    address public owner;
    uint public totalCakes;
    mapping(address => uint) public customerCakes;

    event CakeBaked(uint quantity);
    event CakeSold(address indexed customer, uint quantity);
    event CakeReturned(address indexed customer, uint quantity);

    constructor() 
    {
        owner = msg.sender;
    }

    // Function to bake cakes, only owner can bake
    function bakeCakes(uint quantity) public 
    {
        require(msg.sender == owner, "Only owner can bake cakes");
        require(quantity > 0, "Quantity must be greater than zero");
        
        totalCakes += quantity;
        emit CakeBaked(quantity);
    }

    // Function to sell cakes
    function sellCakes(uint quantity) public payable
    {
        require(quantity > 0, "Quantity must be greater than zero");
        require(totalCakes >= quantity, "Not enough cakes in stock");
        require(msg.value <= quantity * 0.5 ether, "Insufficient payment, 0.5 ether per cake");

        totalCakes -= quantity;
        customerCakes[msg.sender] += quantity;
        emit CakeSold(msg.sender, quantity);
    }

    // Function to return cakes
    function returnCakes(uint quantity) public 
    {
        require(quantity > 0, "Quantity must be greater than zero");
        require(customerCakes[msg.sender] >= quantity, "You don't have enough cakes to return");

        customerCakes[msg.sender] -= quantity;
        totalCakes += quantity;

        // Refund ether to the customer
        uint refundAmount = quantity * 0.5 ether;
        (bool success, ) = msg.sender.call{value: refundAmount}("");
        if (!success) {
            revert("Refund failed");
        }
        
        emit CakeReturned(msg.sender, quantity);
    }

    // Function to withdraw all funds (only owner)
    function withdrawFunds() public 
    {
        require(msg.sender == owner, "Only owner can withdraw funds");
        uint balance = address(this).balance;

        // Ensure the contract has a positive balance before withdrawing
        assert(balance > 0);

        (bool success, ) = owner.call{value: balance}("");
        if (!success) {
            revert("Withdrawal failed");
        }
    }

    // Fallback function to receive ether
    receive() external payable {}
}
